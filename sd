#!/usr/bin/python3
import urllib3
import bs4
import sys
from tabulate import tabulate

# color ANSI escape codes
red = '\x1B[31m'
grn = '\x1B[32m'
yel = '\x1B[33m'
blu = '\x1B[34m'
gry = '\x1B[37;2m'
# reset all fancypants text formatting:
res = '\x1B[0m'

def get_soup_and_quickdef(type_of_trans,word):
    # make http request
    http = urllib3.PoolManager()
    try:
        r = http.request('GET','http://www.spanishdict.com/'+type_of_trans+'/'+word)
    except UnicodeEncodeError:
        print('please type the word without any accents')
        sys.exit(1)

    # make sure the HTTP request went well
    if r.status != 200:
        print('HTTP error:',r.status)
        sys.exit(1)

    # init parser
    bs = bs4.BeautifulSoup(r.data,'html.parser')

    # now get definition
    try:
        wordin = bs.find('h1',{'class':'source-text'}).contents[0]
        wordsout = bs.find('div',{'class':'el'}).text
    except AttributeError:
        print('Word not found.')
        sys.exit(1)
    return bs, wordin, wordsout

def print_quickdef(wordin, wordsout):
    print('------------------------------')
    print(red+wordin+res+': '+red+wordsout+res)
    print('------------------------------')

def translate(word):
    bs,wordin,wordsout = get_soup_and_quickdef('translate',word)

    print_quickdef(wordin, wordsout)

    try:
        chil = [c for c in bs.find('div',{'class':'dictionary-entry dictionary-neodict'}).children]
    except AttributeError:
        print(gry+'No extended translations available'+res)
        sys.exit(0)

    for c in chil:
        if 'part_of_speech' in c.get('class'):
            print(grn+c.text.upper()+res)
        elif 'dictionary-neodict-indent-1' in c.get('class'):
            print('  '+blu+c.find('span',{'class':'context'}).text+res)
            for d in c.find('div',{'class':'dictionary-neodict-indent-2'}).children:
                if 'dictionary-neodict-translation' in d.get('class'):
                    print('    '+d.text)
                elif d.text != '':
                    e = [e for e in d.find('div',{'class':'dictionary-neodict-example'}).children]
                    print('      '+e[0].text)
                    print(gry+"       '-> ",end='')
                    print(e[2].text+res)

    print_quickdef(wordin, wordsout)

def gettables(soup):
    """ Get TCLASS from HTML.
SOUP is a BeautifulSoup object scrapped by BeautifulSoup. TCLASS is the
table class that we want. """
    table = soup.find("div", attrs={"class": "card"})
    for w in table.find_all('span',{'class':'conj-irregular'}):
        w.replace_with(red+w.text+res)
    rows = table.find_all("tr")
    tbls = []
    for row in rows:
        x = row.find_all("td")
        tbls.append([i.text.strip() for i in x])
    tbls = [tbls[i:i+7] for i in range(0, len(tbls), 7)]
    return tbls

def conjugate(verb):
    soup, wordin, wordsout = get_soup_and_quickdef('conjugate',verb)
    title = ["Indicative", "Subjunctive", "Imperative"]
    tables = gettables(soup)
    print_quickdef(wordin, wordsout)
    if len(tables) == 0:
        print(gry+'No conjugation available'+res)
        sys.exit(0)
    print('')
    table_no = 0
    for table in tables:
        if table_no == 3:
            break
        print(title[table_no])
        table[0][0] = "Pronoun"
        print(tabulate(table[1:], headers=table[0], tablefmt="orgtbl"),
                end='\n\n')
        table_no += 1
    print_quickdef(wordin, wordsout)

if __name__=='__main__':
    if len(sys.argv) == 2:
        translate(sys.argv[1])
        sys.exit(0)
    elif len(sys.argv) == 3:
        if sys.argv[1] != 'conj':
            print('usage: sd <just one word>')
            print('       sd conj <verb>')
        conjugate(sys.argv[2])
        sys.exit(0)
    else:
        print('usage: sd <just one word>')
        print('       sd conj <verb>')
        sys.exit(1)

