#!/usr/bin/python3
from requests import get
from bs4 import BeautifulSoup
from sys import argv,exit
from tabulate import tabulate

# color ANSI escape codes
red = '\x1B[31m'
grn = '\x1B[32m'
yel = '\x1B[33m'
blu = '\x1B[34m'
gry = '\x1B[37;2m'
# reset all fancypants text formatting:
res = '\x1B[0m'

def get_soup(type_of_trans,word):
    # make http request
    try:
        r = get('http://www.spanishdict.com/'+type_of_trans+'/'+word)
    except UnicodeEncodeError:
        print('please type the word without any accents')
        exit(1)
    except:
        print('error fetching spanishdict.com')
        exit(1)

    # make sure the HTTP request went well
    if r.status_code != 200:
        print('HTTP error:',r.status_code,r.reason)
        exit(1)

    return BeautifulSoup(r.content,'html.parser')

def get_quickdef(bs):
    wordsin = []
    wordsout = []
    try:
        wordin = bs.find('div', id='headword-en').h1.text
        wordout = bs.find('div', id='quickdef1-en').text
    except AttributeError:
        return get_quickdef_es(bs)
        exit(1)
    return wordin, wordout

def get_quickdef_es(bs):
    wordsin = []
    wordsout = []
    try:
        wordin = bs.find('div', id='headword-es').h1.text
        wordout = bs.find('div', id='quickdef1-es').text

    except AttributeError:
        print('Word not found.')
        exit(1)
    return wordin, wordout

def print_quickdef(wordin, wordsout):
    print('------------------------------')
    print(red+wordin+res+': '+red+wordsout+res)
    print('------------------------------')

def print_translation_body(bs):
    # try to read the neodict dictionary
    try:
        for c in bs.find('div',{'class':'_7Px27Lfg'}).children:
            if 'part_of_speech' in c.get('class'):
                print(grn+c.text.upper()+res)
            elif 'dictionary-neodict-indent-1' in c.get('class'):
                print('  '+blu+c.find('span',{'class':'context'}).text+res)
                for d in c.find('div',{'class':'dictionary-neodict-indent-2'}).children:
                    if 'dictionary-neodict-translation' in d.get('class'):
                        print('    '+d.text)
                    elif d.text != '':
                        for ex in d.find_all('div',{'class':'dictionary-neodict-example'}):
                            e = [e for e in ex.children]
                            print('      '+e[0].text)
                            print(gry+"       '-> ",end='')
                            print(e[2].text+res)
        return True
    except AttributeError:
        pass

    # try to read the neoharrap dictionary
    try:
        for c in bs.find('div',{'class':'dictionary-neoharrap'}).children:
            if 'part_of_speech' in c.get('class'):
                print(grn+c.text.upper()+res)
            elif 'dictionary-neoharrap-indent-1' in c.get('class'):
                print('  '+blu+c.find('span',{'class':'context'}).text+res)
                for d in c.find('div',{'class':'dictionary-neoharrap-indent-2'}).children:
                    if 'dictionary-neoharrap-translation' in d.get('class'):
                        print('    '+d.text)
                    elif d.text != '':
                        for ex in d.find_all('div',{'class':'dictionary-neoharrap-example'}):
                            e = [e for e in ex.children]
                            print('      '+e[0].text)
                            print(gry+"       '-> ",end='')
                            print(e[2].text+res)
        return True
    except AttributeError:
        pass

    print(gry+'No extended translations available'+res)
    return False

def translate(word):
    bs = get_soup('translate',word)

    wordin,wordsout = get_quickdef(bs)
    print_quickdef(wordin, wordsout)
    print_translation_body(bs)

def gettables(soup):
    """ Get TCLASS from HTML.
SOUP is a BeautifulSoup object scrapped by BeautifulSoup. TCLASS is the
table class that we want. """
    table = soup.find("table", attrs={"class": "_2WLTGmgs"})
    for w in table.find_all('span',{'class':'conj-irregular'}):
        w.replace_with(red+w.text+res)
    rows = table.find_all("tr")
    tbls = []
    for row in rows:
        x = row.find_all("td")
        tbls.append([i.text.strip() for i in x])
    tbls = [tbls[i:i+7] for i in range(0, len(tbls), 7)]
    return tbls

def conjugate(verb):
    soup = get_soup('conjugate',verb)
    wordin, wordsout = get_quickdef(soup)
    title = [grn+"INDICATIVE"+res, grn+"SUBJUNCTIVE"+res, grn+"IMPERATIVE"+res]
    tables = gettables(soup)
    print_quickdef(wordin, wordsout)
    if len(tables) == 0:
        print(gry+'No conjugation available'+res)
        exit(0)
    print('')
    basics = ''
    for i in soup.find_all('div',{'class':'conj-row conj-basics-row'}):
        basics += grn + i.find('a').contents[0].strip().upper() + res
        basics += '\t'
        basics += i.find('span',{'class':'conj-basic-word'}).contents[0].strip()
        basics += '\n'
    print(basics)
    table_no = 0
    for table in tables:
        if table_no == 3:
            break
        print(title[table_no])
        table[0][0] = "Pronoun"
        print(tabulate(table[1:], headers=table[0], tablefmt="orgtbl"),
                end='\n\n')
        table_no += 1

def make_ascii(word):
    return word.lower().replace('á','a').replace('é','e').replace('í','i').replace('ó','o').replace('ú','u').replace('ü','u').replace('ñ','n')

if __name__=='__main__':
    if len(argv) == 2:
        translate(make_ascii(argv[1]))
        exit(0)
    elif len(argv) == 3:
        if argv[1] != 'conj':
            print('usage: sd <just one word>')
            print('       sd conj <verb>')
        conjugate(make_ascii(argv[2]))
        exit(0)
    else:
        print('usage: sd <just one word>')
        print('       sd conj <verb>')
        exit(1)

